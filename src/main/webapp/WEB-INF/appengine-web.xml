<?xml version="1.0" encoding="utf-8"?>
<appengine-web-app xmlns="http://appengine.google.com/ns/1.0">
    <!--<application>noble-helper-766</application>-->
    <application>afrika-run</application>
    <runtime>java8</runtime>
    <service>default</service>
    <version>034</version>
    <!-- Performancetuning: Wir haben ja eine Servletbasierte App, daher muss sie auch threadSave sein -->
    <threadsafe>true</threadsafe>
    <sessions-enabled>true</sessions-enabled>
    <!-- Performancetuning: With async session persistence turned on, App Engine will submit a Task Queue task to write session data to the
    datastore before writing the data to memcache
    -> "true" scheint nicht zu funktionieren :( -->
    <async-session-persistence enabled="false"/>
    <system-properties>
        <property name="javax.el.ExpressionFactory" value="com.sun.el.ExpressionFactoryImpl"/>
    </system-properties>

    <!-- Instance Settings -->
    <!--<instance-class>F2</instance-class>-->
    <automatic-scaling>
        <!--<min-idle-instances>1</min-idle-instances>-->
        <!-- ‘automatic’ is the default value. -->
        <!--<max-idle-instances>automatic</max-idle-instances>-->
        <!-- ‘automatic’ is the default value. -->
        <!--<min-pending-latency>30ms</min-pending-latency>-->
        <!--<max-pending-latency>automatic</max-pending-latency>-->
        <max-concurrent-requests>50</max-concurrent-requests>
    </automatic-scaling>
    <staging>
        <!-- INFO: We detected that you have a large number of .class files in WEB-INF/classes.
        You may be able to reduce request latency by packaging your .class files into jars.
        To do this, supply <enable-jar-classes>true</enable-jar-classes> in the <staging> tag in appengine-web.xml or
        one of the following methods:
        You can supply the -\-enable_jar_classes flag when using appcfg on command line.
        If you're using the Cloud SDK based app-maven-plugin, add <stage.enableJarClasses>true</stage.enableJarClasses>
        in the plugin's <configuration> tag.
        If you are using the AppCfg based appengine-maven-plugin, supply <enableJarClasses>true</enableJarClasses> in
        the plugin's <configuration> tag.
        Note that this flag will put the jar in WEB-INF/lib rather than WEB-INF/classes.
        The classloader first looks in WEB-INF/classes and then WEB-INF/lib when loading a class.
        As a result, this flag could change classloading order, which may affect the behavior of your app. -->
        <enable-jar-classes>false</enable-jar-classes><!-- true does not work on GAE deployment :( -->
    </staging>
</appengine-web-app>
